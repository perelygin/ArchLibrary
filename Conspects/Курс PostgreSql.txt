Утилиты 
посмотреть перечень кластеров -  pg_lsclusters 
управление кластером - pg_ctlcluster
	запуск pg_ctlcluster 14(версия кластера) main2(имя кластера) start
    остановка кластера - pg_ctlcluster 14 main2 stop

Создание нового кластеров - pg_createcluster
		pg_createcluster 14(версия postgres) main2(имя кластера)
		создать кластер - pg_createcluster 14 main2  
		запустить кластер - pg_ctlcluster 14 main2 start
Удаление кластера - pg_dropcluster 14(версия postgres) main2(имя кластераё)
		остановить кластер - pg_ctlcluster 14 main2 stop
		удалить кластер - pg_dropcluster 14 main2

подключение с паролем psql -h localhost
подключение с паролем psql -U postgres(пользователь) -h localhost -d postgres(база) -p(порт)
Подключение к базе по сети:
	Включить listner в postgresql.conf:
			listen_addresses = '*'                  # what IP address(es) to listen on;
	Изменить маску подсети в pg_hba.conf 
			# IPv4 local connections:
			host    all             all             0.0.0.0/0               scram-sha-256

команды в psql 
 \du  -  посмотреть список пользователей
 \dt  -  список таблиц?
 \l  - список БД
 \di -  индексы
 \dt+ - список таблиц с описанием
 \dt *s* -список всех таблиц содержащих s в имени
 \d+ - описание таблицы
 \d "имя таблицы" - описание таблицы
 \echo - вывод сообщения
 \i - выполнение внешнего скрипта
 
 \conninfo - посмотреть параметры подключения
 show hba_file;   - посмотреть где лежит hba_file
 show config_file; - посмотреть где лежит config_file
 \password -  поменять пароль пользователя
 

**************настройки postgress
show all;
show work_mem;
select name, context from pg_settings;  - перечень настроек
контексты -  сеанс(user),  сессия(backend), superuser

SET LOCAL work_mem = '64kB';
 параметры можно задать в файле postgress.conf
 https://pgtune.leopard.in.ua/#/ -  on-line конфигуратор
 http://pgconfigurator.cybertec.at/
nano /etc/postgresql/14/main/postgresql.conf   - редактировнаие файла с конфигурацией

*****архитектура postgres
 процесс background при запуске плодит другие процессы(bgwriter, checkpointer, autovacum, WAL writer, statistic,archiver)
  Shared memmory - через нее все процессы общаются с базой данных
  Для каждого пользователя делается fork процесса background. У каждого backend процесса есть буферный кэш: work_mem(Для сортировки), maintenance_work_mem(для служебных операций), 
  temp_buffers(для хранения буферных таблиц).
  
  backend  процессы пишут все в shared memory(shared buffer pool, WAL buffer - буферы журналов) 
  
  внутри сессии запрос обрабатывается: Parser, Analyser, Rewriter, Planner, Execute.
  
***Множественная параллельня нагрузка
параллельня работа множества сессий(concurrency), которые модифицируют данные так,  чтобы  они не мешали друг другу,  ни на запись, ни на чтение? И обеспечивали целостность данных 
т.н. consistency и их  надежность(durability)
Online Transacion Processing(OLTP) 
Atomicity Consistency Isolation Durability(ACID) -  атомарность,  согласованность,  излорованность,  долговечность

Надежность - Algorithms for Recovery and Isolation Exploiting Semantics(ARIES) - , логирование, отмена и т.д.
		   - Multiversion Concurrency Control(MVCC) - мех-м copy-on-write т.е. каждый пользователь работает со снимком БД и не видит чужих изменений до их фиксации.
		   

SELECT txid_current(); - текущая транзакция
параметр \echo :AUTOCOMMIT -  при включении автоматом оборачивает операцию в транзакцию
\set AUTOCOMMIT OFF  -  отключить параметр 
show transaction isolation level; - текущий уровень изоляции транзакции
ROLLBACK; - откатить транзакцию
begin, begin transaction, start transaction  -  начать транзакцию 

SELECT relname, n_live_tup, n_dead_tup, trunc(100*n_dead_tup/(n_live_tup+1))::float "ratio%", last_autovacuum FROM pg_stat_user_tables WHERE relname = 'test'; - посмотреть число мертвых записей

SELECT xmin,xmax,cmin,cmax,ctid FROM test; - посмотреть код транзакции,  которая создала  и/или уадалила запись.  номера команд в треназакции

CREATE EXTENSION pageinspect;  - extension расширяет базовый функционал.  Возможность просмотра удаленных записей. Посмотреть список extentions - \dx+

посмотреть сырые данные:
SELECT lp as tuple, t_xmin, t_xmax, t_field3 as t_cid, t_ctid FROM heap_page_items(get_raw_page('test',0));
Подробная информция о сырых данных:
SELECT * FROM heap_page_items(get_raw_page('test',0)) \gx

20-45
типы АНОМАЛИЙ: грязное чтение, неповторяющеся чтение, фантомное чтение, аномалия сериализации
Уровни изоляции транзакций:
read uncommited 
Read commited
Repeateble Read
Serializable

***Вакуум и автовакуум

VACUUM  - удаление мертвых записей
VACUUM Verbose - удаление с выводом на экран
VACUUM Analyze - удаление и потом анализ всех указанных таблиц
VACUUM FULL - дефрагментация с созданием нового файла с переносом туда только живых записей

следить за процессом можно через  VACUUM Verbose или системное представление: SELECT * from pg_stat_progress_vacuum;

настройки автовакуума:
autovacuum_max_workers =  10 //число параллельныхх процессов
autovacuum_naptime = 15s //время сна между запусками процессов автовакуума
autovacuum_vacuum_threhold = 25 //  минимальное количество изменных строк, при котром автоваккум придет в таблицу для очистки

посмотреть настройки автовакуума: 
SELECT name, setting, context, short_desc FROM pg_settings WHERE category like '%Autovacuum%';

**Заморозка
при переходе номера транзакци через 0 может произойти ситуация, когда тразакция с меньшим номером будет считьться старше транзакци с большим номером. 
Что бы такое не происходило,  автоваккум делает заморозку транзакций. Замороженные трнанзакции в априори самые старые 
Параметры заморозки:
SHOW vacuum_freeze_min_age;
SHOW vacuum_freeze_table_age
SHOW vacuum_freeze_max_age



***Буферный кэш
процесс postgres порождает фоновые процессы и backenf-процессы. и все они работают через разделяемую память(shared memory), в которой и лежит буферный кэш. 
Весь обмен с базой данных(файловой системой) идет через буферный кэш.
каждый буфер состоит из одной страницы данных и заголовка.
Заголовок содержит: Расположение страницы на диске;  число обращений к буферу(счетчик <=5); Признак того, 
что данные на странице изменились и их пора записать на диск(грязный буфер) 

Первоначально кэш содержит: Список свободных буферов, указатель на буфер который  будет вытеснен первым, Хэш-таблица для поиска страниц в буфере.
По  хэш-таблице опеределяется,  есть ли данные в буфере. Если есть,  буфер закрепляется на время транзакции. Его нельзя вытеснить во время транзакции. 
Если информации о запросе нет в хэш-таблице, то таблица подтягивается в свободный буфер.
Если  блоки закончились и нужно вытеснять на диск.  Есть специальный механизм "victim page". Он итеративно пробегает по всем буферам и уменьшает 
на 1 число обращений к буферу. Находит буфер с 0,  и если он не закреплен, то вытесняем его на диск. 
механизм Bgwriter 
механизм СheckPoint

Shared_buffers =  25% от ОЗУ

разогрев кэша нужен  после рестарта кластера - заполняем кэш указаными таблицами. Утилита pg_prewarm

***Журналы
Журнал - write ahead log(WAL). Служит для восстановления  согласованности данных после сбоя.
При изменении данных, действие так же записывается в журнал. Журнальная запись попадает на диск раньше изменных данных.
В журнал попадает изменение любых страниц в буферном кэше. Так же в журнал попадает фиксация и отмена транзакций(Буферы ХАСТ)
Восстановление после сбоя - повторное выполнение потерянных операций с помощью журнальных записей. 
Журнал - файлы по 16мб в каталоге  $PGDATA/pg_wal
кольцевой буфер в памяти(Большие данные)
Журнал состоит из:
 - контрольная сумма
 - номер транзакции
 - длина блока
 - ссылка на предыдущий
 - менеджер ресурсов, который внес изменения
Номер записи 64бита Long Sequence Number(LSN)

Механизм упреждающей записи. 
У нас есть буферный кэш и WAL-буферы
есть текущий LSN 

Восстановление.
 Определить страницу,  к котрой относится запись.
 Применить запись,  если ее LSN больше чем LSN страницы.
 
***Блокировки
Упорядочение конкурентного доступа к разделяемым ресурсам.
Перед обращение к данным,  процесс захватывает блокировку. Остальные процессы ожидают освобождения ресурса. После обращения к данным - процесс освобождает ресурс.
Ресурсы это - хранимые объекты(страницы, таблицы, строки), структуры данных в памяти (хеш-таблицы, буферы),  абстрактные ресурсы(число).
Гранулярность  блокировки - это уровень детализации в иеерархии ресурсов. выше гранулярность , тем больше возможностей для параллелизма
Режимы блокировок - совместимость режимов определяется матрицей.  Больше совместимых режимов - больше возможностей для параллелизма
Виды блокировок:
 - исключительные(exclusive)
 - Совместные(Shared) 
 
По времени жизни:
 - Долговременные. Захват до конца транзакции и относятся к хранимым данным(таблицы, отношения).Тяжелые,есть настройки,мониторинг, и прочие плюшки
 - Shared. Захват на доли секунды и относятся к структурам в памяти, минимум режимов
 
	+Блокировки отношений
	+Блокировки срок(страницы на диске), Дедлок - в взаимоблокировка. Автоматически  разрывает одну из зависимостей. 
	+Блокировки в памяти.  lightweightlock,  bufferpin
